package ps

import (
	"crypto/rand"
	"crypto/rsa"
	"math/big"
	"testing"

	"github.com/shogo82148/goat/sig"
)

func newBigInt(s string) *big.Int {
	n, ok := new(big.Int).SetString(s, 10)
	if !ok {
		panic("failed to parse " + s)
	}
	return n
}

var tests = []struct {
	alg  func() sig.Algorithm
	priv *rsa.PrivateKey
	pub  *rsa.PublicKey
	in   []byte
	out  []byte
}{
	{
		New256,
		&rsa.PrivateKey{
			PublicKey: rsa.PublicKey{
				N: newBigInt("2044670291674465456259634338875880586006520963996017350503745333127027051873224508977372301204320323" +
					"6097095623402044690115755377345254696448759605707788965848889501746836211206270643833663949992536246" +
					"9853626937363871851454247879222415857219929240456752293486555956264343900430028215127656303977230280" +
					"2379257793510818582275369257422156693093780503115582009714681996492027000881132703628678639279359312" +
					"1762425048860211859763441770446703722015857250621107855398693133264081150697423188751482418465308470" +
					"3139582507577585471556997491579859553793812949620588621590859150153693810469597904764286319982049408" +
					"79604226680285601"),
				E: 65537,
			},
			D: newBigInt("2358310989939619510179986262349936882924652023566213765118606431955566700506538911356936879137503597" +
				"38251591951563324248264331442319270412829659367296606181014931632061789402182278402640746140338406535182197235078" +
				"43009676101434594843240684276746396884059179774424728049430754391920261073195321175575450790865379829879825223966" +
				"26690057355718157403493216553255260857777965627529169195827622139772389760130571754834678679842181142252489617665" +
				"03010944557397801270779301059273764049922001508339242591487784784045727824640276095588337699995119982770628538347" +
				"1150643561410605789710883438795588594095047409018233862167884701"),
			Primes: []*big.Int{
				newBigInt("1573770559024474383955861650289602919149319732787775327984702001560352675373592390718294084119093232" +
					"0857495980053724772895971823688480968523328453734920765466153080185988938945512093207719940625038722" +
					"6339056140578989122526711937239401762061949364440402067108084155200696015505170135950332209194782224" +
					"750221639"),
				newBigInt("1299217525674063589909933475400644450182300734024822609941793285733238619083792112746269565434716649" +
					"9723718529896464813332434332705285226406032208812240112478124908587346482428266651490812714191594302" +
					"4862618996371026577302203267804867959037802770797169483022132210859867700312376409633383772189122488" +
					"119155159"),
			},
		},
		&rsa.PublicKey{
			N: newBigInt("2044670291674465456259634338875880586006520963996017350503745333127027051873224508977372301204320323" +
				"6097095623402044690115755377345254696448759605707788965848889501746836211206270643833663949992536246" +
				"9853626937363871851454247879222415857219929240456752293486555956264343900430028215127656303977230280" +
				"2379257793510818582275369257422156693093780503115582009714681996492027000881132703628678639279359312" +
				"1762425048860211859763441770446703722015857250621107855398693133264081150697423188751482418465308470" +
				"3139582507577585471556997491579859553793812949620588621590859150153693810469597904764286319982049408" +
				"79604226680285601"),
			E: 65537,
		},
		[]byte{
			101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73,
			49, 78, 105, 74, 57, 46, 101, 121, 74, 112, 99, 51, 77, 105, 79, 105,
			74, 113, 98, 50, 85, 105, 76, 65, 48, 75, 73, 67, 74, 108, 101, 72,
			65, 105, 79, 106, 69, 122, 77, 68, 65, 52, 77, 84, 107, 122, 79, 68,
			65, 115, 68, 81, 111, 103, 73, 109, 104, 48, 100, 72, 65, 54, 76,
			121, 57, 108, 101, 71, 70, 116, 99, 71, 120, 108, 76, 109, 78, 118,
			98, 83, 57, 112, 99, 49, 57, 121, 98, 50, 57, 48, 73, 106, 112, 48,
			99, 110, 86, 108, 102, 81,
		},
		[]byte{
			0x76, 0x53, 0xc2, 0x27, 0x96, 0x95, 0x8e, 0x3c, 0x98, 0x3a, 0xa1, 0xa2, 0xea, 0x3e, 0x41, 0x66,
			0xd5, 0x17, 0xb0, 0xa8, 0xc9, 0xc0, 0x77, 0x94, 0xe6, 0x92, 0x55, 0x45, 0xf9, 0x4b, 0x5d, 0xab,
			0xbc, 0x44, 0x80, 0xcb, 0xc5, 0x8a, 0x9f, 0x64, 0xfc, 0x30, 0x84, 0x61, 0xe5, 0x97, 0x79, 0x98,
			0x37, 0xfd, 0x5f, 0x7e, 0xe7, 0x9e, 0x47, 0x3e, 0x2d, 0x48, 0x46, 0x2c, 0xf0, 0x8f, 0x79, 0x92,
			0xed, 0x3c, 0x51, 0x47, 0xce, 0x00, 0xe9, 0x5a, 0xc9, 0x7d, 0xde, 0xc0, 0xe2, 0x3b, 0x55, 0x1e,
			0xa1, 0x17, 0x99, 0x76, 0x4f, 0x3d, 0x1f, 0x8a, 0x74, 0x85, 0x1c, 0xc5, 0x57, 0x16, 0xd2, 0xef,
			0xda, 0x31, 0x3c, 0x6e, 0x45, 0x9e, 0x10, 0x0f, 0x6e, 0xf7, 0x30, 0x1e, 0x19, 0x20, 0xac, 0x4d,
			0xa7, 0xad, 0x08, 0x86, 0xf7, 0x13, 0xc7, 0x93, 0xe6, 0xc3, 0x26, 0x88, 0xa0, 0xaa, 0xeb, 0x81,
			0x24, 0x8d, 0x01, 0x18, 0xbb, 0xfd, 0x84, 0xe2, 0x6d, 0xf5, 0x94, 0x8d, 0xa9, 0x26, 0x9d, 0x2b,
			0x62, 0xfd, 0xdd, 0x10, 0xec, 0x34, 0x16, 0xff, 0xc7, 0x70, 0x49, 0x80, 0x61, 0x8c, 0xe5, 0x28,
			0xd0, 0xf9, 0x18, 0x83, 0xac, 0x76, 0xf9, 0x2d, 0x84, 0x09, 0x78, 0x40, 0x8a, 0x1b, 0x09, 0x2d,
			0x57, 0xcd, 0x69, 0x46, 0x93, 0x1d, 0xf6, 0xdc, 0x27, 0x60, 0x09, 0x34, 0xb0, 0x48, 0x92, 0xee,
			0x5f, 0xec, 0x99, 0xc9, 0x9c, 0x4a, 0x6e, 0x82, 0x56, 0xde, 0xa3, 0x29, 0x91, 0x58, 0x1c, 0xff,
			0xc4, 0xb5, 0x93, 0x01, 0x8c, 0xeb, 0x1d, 0x1d, 0xb6, 0x14, 0xf2, 0x1a, 0x54, 0xb4, 0xd5, 0xc5,
			0xcf, 0xcf, 0x5e, 0x56, 0x17, 0x43, 0x6d, 0xb6, 0xc6, 0xf3, 0x19, 0x5f, 0xd7, 0xf9, 0x41, 0x19,
			0x24, 0x54, 0x75, 0x24, 0x57, 0x32, 0x2b, 0x36, 0x1d, 0x47, 0x47, 0x4d, 0x82, 0x5f, 0xbb, 0xed,
		},
	},
}

func TestVerify(t *testing.T) {
	for i, test := range tests {
		alg := test.alg()
		key := alg.NewKey(nil, test.pub)
		err := key.Verify(test.in, test.out)
		if err != nil {
			t.Errorf("test %d: %v", i, err)
			continue
		}
	}
}

func TestSignAndVerify(t *testing.T) {
	for i, test := range tests {
		alg := test.alg()
		key := alg.NewKey(test.priv, test.pub)
		got, err := key.Sign(test.in)
		if err != nil {
			t.Errorf("test %d: %v", i, err)
			continue
		}
		if err := key.Verify(test.in, got); err != nil {
			t.Errorf("test %d: %v", i, err)
			continue
		}
	}
}

func TestWeakKeys(t *testing.T) {
	rsakey, err := rsa.GenerateKey(rand.Reader, 2047)
	if err != nil {
		t.Fatal(err)
	}

	key := New256().NewKey(rsakey, rsakey.Public())
	if _, err := key.Sign([]byte("payload")); err == nil {
		t.Error("want some error, but not")
	}

	key = New256Weak().NewKey(rsakey, rsakey.Public())
	if _, err := key.Sign([]byte("payload")); err != nil {
		t.Error(err)
	}
}
