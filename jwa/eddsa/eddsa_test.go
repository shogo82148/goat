package eddsa

import (
	"crypto/ed25519"
	"crypto/subtle"
	"testing"
)

func TestSign(t *testing.T) {
	// RFC 8037 Appendix A.4. Ed25519 Signing
	payload := `eyJhbGciOiJFZERTQSJ9.RXhhbXBsZSBvZiBFZDI1NTE5IHNpZ25pbmc`
	privateKey := ed25519.PrivateKey{
		0x9d, 0x61, 0xb1, 0x9d, 0xef, 0xfd, 0x5a, 0x60, 0xba, 0x84, 0x4a, 0xf4, 0x92, 0xec, 0x2c, 0xc4,
		0x44, 0x49, 0xc5, 0x69, 0x7b, 0x32, 0x69, 0x19, 0x70, 0x3b, 0xac, 0x03, 0x1c, 0xae, 0x7f, 0x60,
		0xd7, 0x5a, 0x98, 0x01, 0x82, 0xb1, 0x0a, 0xb7, 0xd5, 0x4b, 0xfe, 0xd3, 0xc9, 0x64, 0x07, 0x3a,
		0x0e, 0xe1, 0x72, 0xf3, 0xda, 0xa6, 0x23, 0x25, 0xaf, 0x02, 0x1a, 0x68, 0xf7, 0x07, 0x51, 0x1a,
	}

	alg := New()
	key := alg.NewKey(privateKey, nil)
	got, err := key.Sign([]byte(payload))
	if err != nil {
		t.Fatal(err)
	}
	want := []byte{
		0x86, 0x0c, 0x98, 0xd2, 0x29, 0x7f, 0x30, 0x60, 0xa3, 0x3f, 0x42, 0x73, 0x96, 0x72, 0xd6, 0x1b,
		0x53, 0xcf, 0x3a, 0xde, 0xfe, 0xd3, 0xd3, 0xc6, 0x72, 0xf3, 0x20, 0xdc, 0x02, 0x1b, 0x41, 0x1e,
		0x9d, 0x59, 0xb8, 0x62, 0x8d, 0xc3, 0x51, 0xe2, 0x48, 0xb8, 0x8b, 0x29, 0x46, 0x8e, 0x0e, 0x41,
		0x85, 0x5b, 0x0f, 0xb7, 0xd8, 0x3b, 0xb1, 0x5b, 0xe9, 0x02, 0xbf, 0xcc, 0xb8, 0xcd, 0x0a, 0x02,
	}
	if subtle.ConstantTimeCompare(got, want) == 0 {
		t.Errorf("signature mismatch: want %#v, got %#v", want, got)
	}
}

func TestVerify(t *testing.T) {
	// RFC 8037 Appendix A.5. Ed25519 Validation
	payload := `eyJhbGciOiJFZERTQSJ9.RXhhbXBsZSBvZiBFZDI1NTE5IHNpZ25pbmc`
	publicKey := ed25519.PublicKey{
		0xd7, 0x5a, 0x98, 0x01, 0x82, 0xb1, 0x0a, 0xb7, 0xd5, 0x4b, 0xfe, 0xd3, 0xc9, 0x64, 0x07, 0x3a,
		0x0e, 0xe1, 0x72, 0xf3, 0xda, 0xa6, 0x23, 0x25, 0xaf, 0x02, 0x1a, 0x68, 0xf7, 0x07, 0x51, 0x1a,
	}
	sig := []byte{
		0x86, 0x0c, 0x98, 0xd2, 0x29, 0x7f, 0x30, 0x60, 0xa3, 0x3f, 0x42, 0x73, 0x96, 0x72, 0xd6, 0x1b,
		0x53, 0xcf, 0x3a, 0xde, 0xfe, 0xd3, 0xd3, 0xc6, 0x72, 0xf3, 0x20, 0xdc, 0x02, 0x1b, 0x41, 0x1e,
		0x9d, 0x59, 0xb8, 0x62, 0x8d, 0xc3, 0x51, 0xe2, 0x48, 0xb8, 0x8b, 0x29, 0x46, 0x8e, 0x0e, 0x41,
		0x85, 0x5b, 0x0f, 0xb7, 0xd8, 0x3b, 0xb1, 0x5b, 0xe9, 0x02, 0xbf, 0xcc, 0xb8, 0xcd, 0x0a, 0x02,
	}

	alg := New()
	key := alg.NewKey(nil, publicKey)
	err := key.Verify([]byte(payload), sig)
	if err != nil {
		t.Fatal(err)
	}
}
