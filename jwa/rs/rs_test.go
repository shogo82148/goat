package rs

import (
	"crypto/hmac"
	"crypto/rsa"
	"math/big"
	"testing"

	"github.com/shogo82148/goat/sig"
)

func newBigInt(s string) *big.Int {
	n, ok := new(big.Int).SetString(s, 10)
	if !ok {
		panic("failed to parse " + s)
	}
	return n
}

var tests = []struct {
	alg  func() sig.Algorithm
	priv *rsa.PrivateKey
	pub  *rsa.PublicKey
	in   []byte
	out  []byte
}{
	// RFC 7515 Appendix A.2. Example JWS Using RSASSA-PKCS1-v1_5 SHA-256
	{
		New256,
		&rsa.PrivateKey{
			PublicKey: rsa.PublicKey{
				N: newBigInt("2044670291674465456259634338875880586006520963996017350503745333127027051873224508977372301204320323" +
					"6097095623402044690115755377345254696448759605707788965848889501746836211206270643833663949992536246" +
					"9853626937363871851454247879222415857219929240456752293486555956264343900430028215127656303977230280" +
					"2379257793510818582275369257422156693093780503115582009714681996492027000881132703628678639279359312" +
					"1762425048860211859763441770446703722015857250621107855398693133264081150697423188751482418465308470" +
					"3139582507577585471556997491579859553793812949620588621590859150153693810469597904764286319982049408" +
					"79604226680285601"),
				E: 65537,
			},
			D: newBigInt("2358310989939619510179986262349936882924652023566213765118606431955566700506538911356936879137503597" +
				"38251591951563324248264331442319270412829659367296606181014931632061789402182278402640746140338406535182197235078" +
				"43009676101434594843240684276746396884059179774424728049430754391920261073195321175575450790865379829879825223966" +
				"26690057355718157403493216553255260857777965627529169195827622139772389760130571754834678679842181142252489617665" +
				"03010944557397801270779301059273764049922001508339242591487784784045727824640276095588337699995119982770628538347" +
				"1150643561410605789710883438795588594095047409018233862167884701"),
			Primes: []*big.Int{
				newBigInt("1573770559024474383955861650289602919149319732787775327984702001560352675373592390718294084119093232" +
					"0857495980053724772895971823688480968523328453734920765466153080185988938945512093207719940625038722" +
					"6339056140578989122526711937239401762061949364440402067108084155200696015505170135950332209194782224" +
					"750221639"),
				newBigInt("1299217525674063589909933475400644450182300734024822609941793285733238619083792112746269565434716649" +
					"9723718529896464813332434332705285226406032208812240112478124908587346482428266651490812714191594302" +
					"4862618996371026577302203267804867959037802770797169483022132210859867700312376409633383772189122488" +
					"119155159"),
			},
		},
		&rsa.PublicKey{
			N: newBigInt("2044670291674465456259634338875880586006520963996017350503745333127027051873224508977372301204320323" +
				"6097095623402044690115755377345254696448759605707788965848889501746836211206270643833663949992536246" +
				"9853626937363871851454247879222415857219929240456752293486555956264343900430028215127656303977230280" +
				"2379257793510818582275369257422156693093780503115582009714681996492027000881132703628678639279359312" +
				"1762425048860211859763441770446703722015857250621107855398693133264081150697423188751482418465308470" +
				"3139582507577585471556997491579859553793812949620588621590859150153693810469597904764286319982049408" +
				"79604226680285601"),
			E: 65537,
		},
		[]byte{
			101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73,
			49, 78, 105, 74, 57, 46, 101, 121, 74, 112, 99, 51, 77, 105, 79, 105,
			74, 113, 98, 50, 85, 105, 76, 65, 48, 75, 73, 67, 74, 108, 101, 72,
			65, 105, 79, 106, 69, 122, 77, 68, 65, 52, 77, 84, 107, 122, 79, 68,
			65, 115, 68, 81, 111, 103, 73, 109, 104, 48, 100, 72, 65, 54, 76,
			121, 57, 108, 101, 71, 70, 116, 99, 71, 120, 108, 76, 109, 78, 118,
			98, 83, 57, 112, 99, 49, 57, 121, 98, 50, 57, 48, 73, 106, 112, 48,
			99, 110, 86, 108, 102, 81,
		},
		[]byte{
			112, 46, 33, 137, 67, 232, 143, 209, 30, 181, 216, 45, 191, 120, 69,
			243, 65, 6, 174, 27, 129, 255, 247, 115, 17, 22, 173, 209, 113, 125,
			131, 101, 109, 66, 10, 253, 60, 150, 238, 221, 115, 162, 102, 62, 81,
			102, 104, 123, 0, 11, 135, 34, 110, 1, 135, 237, 16, 115, 249, 69,
			229, 130, 173, 252, 239, 22, 216, 90, 121, 142, 232, 198, 109, 219,
			61, 184, 151, 91, 23, 208, 148, 2, 190, 237, 213, 217, 217, 112, 7,
			16, 141, 178, 129, 96, 213, 248, 4, 12, 167, 68, 87, 98, 184, 31,
			190, 127, 249, 217, 46, 10, 231, 111, 36, 242, 91, 51, 187, 230, 244,
			74, 230, 30, 177, 4, 10, 203, 32, 4, 77, 62, 249, 18, 142, 212, 1,
			48, 121, 91, 212, 189, 59, 65, 238, 202, 208, 102, 171, 101, 25, 129,
			253, 228, 141, 247, 127, 55, 45, 195, 139, 159, 175, 221, 59, 239,
			177, 139, 93, 163, 204, 60, 46, 176, 47, 158, 58, 65, 214, 18, 202,
			173, 21, 145, 18, 115, 160, 95, 35, 185, 232, 56, 250, 175, 132, 157,
			105, 132, 41, 239, 90, 30, 136, 121, 130, 54, 195, 212, 14, 96, 69,
			34, 165, 68, 200, 242, 122, 122, 45, 184, 6, 99, 209, 108, 247, 202,
			234, 86, 222, 64, 92, 178, 33, 90, 69, 178, 194, 85, 102, 181, 90,
			193, 167, 72, 160, 112, 223, 200, 163, 42, 70, 149, 67, 208, 25, 238,
			251, 71,
		},
	},
}

func TestSign(t *testing.T) {
	for i, test := range tests {
		alg := test.alg()
		key := alg.NewKey(test.priv, test.pub)
		got, err := key.Sign(test.in)
		if err != nil {
			t.Errorf("test %d: %v", i, err)
			continue
		}
		if !hmac.Equal(got, test.out) {
			t.Errorf("test %d: want %x, got %x", i, test.out, got)
		}
	}
}

func TestVerify(t *testing.T) {
	for i, test := range tests {
		alg := test.alg()
		key := alg.NewKey(nil, test.pub)
		err := key.Verify(test.in, test.out)
		if err != nil {
			t.Errorf("test %d: %v", i, err)
			continue
		}
	}
}
