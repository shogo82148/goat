package jwk

import (
	"testing"

	"github.com/shogo82148/goat/jwa"
	"github.com/shogo82148/goat/x448"
)

func TestParse_X448(t *testing.T) {
	t.Run("RFC 8037 Appendix A.6. ECDH-ES with X25519", func(t *testing.T) {
		rawKey := `{"kty":"OKP","crv":"X448","kid":"Dave",` +
			`"x":"PreoKbDNIPW8_AtZm2_sz22kYnEHvbDU80W0MCfYuXL8PjT7QjKhPKcG3LV67D2` +
			`uB73BxnvzNgk"}`
		key, err := ParseKey([]byte(rawKey))
		if err != nil {
			t.Fatal(err)
		}
		if key.kty != jwa.OKP {
			t.Errorf("unexpected key type: want %s, got %s", "OKP", key.kty)
		}

		publicKey := x448.PublicKey{
			0x3e, 0xb7, 0xa8, 0x29, 0xb0, 0xcd, 0x20, 0xf5, 0xbc, 0xfc, 0x0b, 0x59, 0x9b, 0x6f, 0xec, 0xcf,
			0x6d, 0xa4, 0x62, 0x71, 0x07, 0xbd, 0xb0, 0xd4, 0xf3, 0x45, 0xb4, 0x30, 0x27, 0xd8, 0xb9, 0x72,
			0xfc, 0x3e, 0x34, 0xfb, 0x42, 0x32, 0xa1, 0x3c, 0xa7, 0x06, 0xdc, 0xb5, 0x7a, 0xec, 0x3d, 0xae,
			0x07, 0xbd, 0xc1, 0xc6, 0x7b, 0xf3, 0x36, 0x09,
		}
		if !publicKey.Equal(key.PublicKey()) {
			t.Errorf("unexpected public key: want %x, got %x", publicKey, key.PublicKey())
		}
	})
}
